Given a pair of strings of equal lengths, Geek wants to find the better string. The better string is the string having more number of distinct subsequences. If both the strings have equal count of distinct subsequence then return str1.

Example 1:

Input:
str1 = "gfg", str2 = "ggg"
Output: "gfg"
Explanation: "gfg" have 7 distinct subsequences whereas "ggg" have 4 distinct subsequences. 


def countDistinctSubsequences(s):
    mod = 10**9 + 7
    last_occurrence = [-1] * 256
    n = len(s)
    dp = [0] * (n + 1)
    dp[0] = 1

    for i in range(1, n + 1):
        dp[i] = (2 * dp[i - 1]) % mod
        if last_occurrence[ord(s[i - 1])] != -1:
            dp[i] = (dp[i] - dp[last_occurrence[ord(s[i - 1])]] + mod) % mod
        last_occurrence[ord(s[i - 1])] = i - 1

    return dp[n]

def findBetterString(str1, str2):
    count1 = countDistinctSubsequences(str1)
    count2 = countDistinctSubsequences(str2)

    if count1 >= count2:
        return str1
    else:
        return str2

# Example
str1 = "gfg"
str2 = "ggg"
result = findBetterString(str1, str2)
print(result)
